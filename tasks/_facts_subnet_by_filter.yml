---
# Gather subnets by filter

# All subnets found need to exist within the current VPC
- set_fact:
    default_vpc: {'vpc-id':"{{aws_vpc_id}}"}
# add filters if defined
- set_fact:
    _aws_vpc_subnet_filter: "{{items.filter | get_attr('key','val')}}"
  when: items.filter is defined
# add cidr filter if defined
- set_fact:
    _aws_vpc_subnet_filter: {'cidr': "{{items.cidr}}"}
  when: items.cidr is defined
# add name filter if defined
- set_fact:
    _aws_vpc_subnet_filter: {'tag:Name': "{{items.name}}"}
  when: items.name is defined
# Add the required vpc-id tag to all searches
- set_fact:
    _aws_vpc_subnet_filter:
      "{{_aws_vpc_subnet_filter | combine(default_vpc)}}"
- name: gather subnets by filter
  ec2_vpc_subnet_facts:
    aws_access_key: "{{lookup('ENV','AWS_ACCESS_KEY') | default(omit)}}"
    aws_secret_key: "{{lookup('ENV','AWS_SECRET_KEY') | default(omit)}}"
    security_token: "{{lookup('ENV','AWS_SECURITY_TOKEN') | default(omit)}}"
    profile: "{{rds.profile | default(aws_rds_profile) | default(omit)}}"
    region: "{{aws_vpc_region | default(aws_rds_default_region)}}"
    filters: "{{_aws_vpc_subnet_filter}}"
  register: _aws_vpc_subnets_filter
- name: set subnet array
  set_fact:
    aws_vpc_subnet_by_filter: "{{aws_vpc_subnet_by_filter}} + ['{{ item.id }}']"
  with_items:
    - "{{_aws_vpc_subnets_filter.subnets}}"
